# /.github/workflows/ci.yml

name: FitPulse Backend CI

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/ci.yml'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend # Imposta la directory di lavoro predefinita per i passaggi

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11' # Usa la versione Python specificata o una compatibile

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # Installa anche le dipendenze per il linting se necessario
        # pip install flake8 black mypy

    - name: Lint code (Placeholder)
      run: |
        echo "Esecuzione linting... (Aggiungere comandi reali come flake8, black, mypy)"
        # flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # black . --check
        # mypy .
        # Per ora, questo passaggio ha successo per impostazione predefinita

    - name: Run tests with pytest
      run: |
        # Assicurati che il modello ONNX fittizio esista per i test
        mkdir -p model
        touch model/intensity_model.onnx
        # Esegui pytest (rileva automaticamente i test in tests/)
        # Il comando viene eseguito dalla directory ./backend
        # Pytest cercherà i test nella sottocartella 'tests'
        # È necessario salire di un livello per importare correttamente 'app'
        # Aggiungiamo la directory corrente al PYTHONPATH
        export PYTHONPATH=$PYTHONPATH:.
        pytest tests/

    - name: Build Docker image (using docker-compose)
      run: |
        echo "Tentativo di build dell'immagine Docker..."
        # Nota: Questo richiede che Docker e docker-compose siano disponibili nel runner.
        # Richiede anche un Dockerfile valido in ./backend/Dockerfile
        # Il docker-compose.yml è nella root, quindi eseguiamo da lì
        cd .. # Torna alla root del progetto
        # Crea un Dockerfile fittizio se non esiste, altrimenti il build fallirà
        if [ ! -f backend/Dockerfile ]; then
          echo "FROM python:3.11-slim\nWORKDIR /app\nCOPY backend/requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\nCOPY backend/app /app/app\nCOPY backend/model /app/model\nCMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]" > backend/Dockerfile
          echo "Creato Dockerfile fittizio per CI."
        fi
        docker-compose -f docker-compose.yml build backend
        # Potresti aggiungere un tag e pushare l'immagine a un registry qui

